generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String    // 存储 MD5 加密后的密码
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  aboutVideos   AboutVideo[]
  phoneNumber   String?
  dateOfBirth   DateTime?
  city          String?
  country       String?
  postalCode    String?
  address       String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

model Appointment {
  id             String   @id @default(cuid())
  name           String
  phone          String
  appointmentTime DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Chat {
  id        String    @id @default(cuid())
  userId    String?   // 可选,因为可能是未登录用户
  userName  String    // 用户名称
  status    ChatStatus @default(OPEN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  user      User?     @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  role      Role     @default(USER)
  chatId    String
  createdAt DateTime @default(now())
  
  chat      Chat     @relation(fields: [chatId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum ChatStatus {
  OPEN
  CLOSED
}

model AboutItem {
  id          String   @id @default(cuid())
  imageUrl    String   // 存储在 Vercel Blob 中的图片 URL
  title       String
  description String
  content     String   @db.Text
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AboutVideo {
  id        String   @id @default(cuid())
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("about_videos")
}

model View {
  id          String   @id @default(cuid())
  title       String
  desc        String
  background  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  order       Int      @default(0)

  @@map("views")
} 